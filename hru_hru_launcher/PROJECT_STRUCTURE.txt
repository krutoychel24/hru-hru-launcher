Hru Hru Launcher Project Structure

This document describes the file and folder structure of a custom Minecraft launcher project. It is intended for personal use as a reminder, as well as to provide context for neural networks and other developers.

🚀 How to Run

To launch the application, follow these steps:

    Make sure you are in the root folder of the project (HruHruLauncher, where this file is located).

    If you are running the project for the first time, install all dependencies:
    Bash

pip install -r requirements.txt

Execute the following command to run the application:
Bash

    python -m hru_hru_launcher.main

📂 File Structure

HruHruLauncher/
├── assets/
│   ├── Minecraftia.ttf
│   └── launcher-icon.ico
├── hru_hru_launcher/
│   ├── __init__.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── mc_worker.py
│   │   └── profile_manager.py
        └── mod_manager.py
        └── updater.py
│   ├── ui/
│   │   ├── __init__.py
│   │   ├── main_window.py
│   │   ├── themes.py
│   │   └── widgets.py
│   ├── utils/
│   │   ├── __init__.py
│   │   └── paths.py
│   ├── config/
│   │   ├── __init__.py
│   │   ├── resources.py
│   │   └── settings.py
│   └── main.py
├── requirements.txt
└── README.md (this file)

📝 Component Descriptions

assets/

A folder for storing non-code resources.

    Minecraftia.ttf: Custom font used in the interface.

    launcher-icon.ico: Application icon.

hru_hru_launcher/

The main project folder, which is a Python package. All source code is located here.

    __init__.py: An empty file that tells Python that this folder is a package and allows importing modules from it.

config/

Modules responsible for configuration and static data.

    resources.py: Stores dictionaries with texts for different languages (localization) and SVG data for icons.

    settings.py: Contains functions for loading and saving launcher settings (such as theme, allocated memory, last nickname) to a JSON file.

core/

The main "backend" logic of the application, not related to the interface.

    mc_worker.py: The most important worker module. The MinecraftWorker class runs all heavy tasks in a separate thread (QThread): downloading game files, installing versions (Vanilla, Forge, Fabric), and launching the Minecraft process itself.

    profile_manager.py: Functions for working with the launcher_profiles.json file in the .minecraft folder.

ui/

Everything related to the user interface (UI), created with PySide6.

    main_window.py: Defines the main MinecraftLauncher class, which is the main application window. It assembles all widgets, manages tabs, handles button clicks, and connects the interface with the core logic.

    themes.py: Contains functions that return strings with styles (QSS) for different themes (dark, light, neon).

    widgets.py: Contains custom, reusable widgets. For example, AnimatedButton—a button with an animation on hover.

utils/

Helper utilities that can be used in different parts of the project.

    paths.py: Functions for getting paths to system folders, such as "Documents" or the assets folder.

    main.py: The entry point of the application. This is the simplest file, whose only task is to create a QApplication instance, show the main window (MinecraftLauncher), and start the application's event loop.

requirements.txt

A text file that lists all external libraries required for the project to work (e.g., PySide6, minecraft-launcher-lib).